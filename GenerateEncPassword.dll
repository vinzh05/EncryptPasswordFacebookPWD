using System;
using System.Linq;
using System.Security.Cryptography;
using System.Text;

namespace EncryptPassword
{
    public static class Encpassword
    {
        public static string GenerateEncPassword(string password, string key_id, string public_key, string version)
        {
            var time = DateTime.UtcNow.ToTimestamp(); // Unix timestamp
            var keyBytes = HexToBytes(public_key); // Convert a hex string to a byte array
            var key = new byte[32];
            new Random().NextBytes(key);
            var iv = new byte[16]; // IV length should be 16 for AES
            var plainText = Encoding.UTF8.GetBytes(password);
            byte[] cipherText;

            using (var aes = new RijndaelManaged())
            {
                aes.Key = key;
                aes.Mode = CipherMode.CBC;
                aes.IV = iv;

                using (var encryptor = aes.CreateEncryptor())
                {
                    cipherText = encryptor.TransformFinalBlock(plainText, 0, plainText.Length);
                }
            }

            var bytesOfLen = BitConverter.GetBytes((short)keyBytes.Length);
            var info = new byte[] 
            { 
                1, byte.Parse(key_id) 
            };
            var bytes = info.Concat(bytesOfLen).Concat(keyBytes).Concat(iv).Concat(cipherText).ToArray();

            var str = $"#PWD_BROWSER:{version}:{time}:{Convert.ToBase64String(bytes)}";
            return str;
        }

        public static byte[] HexToBytes(this string hex)
        {
            return Enumerable.Range(0, hex.Length / 2)
                .Select(x => Convert.ToByte(hex.Substring(x * 2, 2), 16))
                .ToArray();
        }

        public static string ToBase64(this byte[] bytes)
        {
            return Convert.ToBase64String(bytes);
        }

        public static byte[] GetBytes(this string str)
        {
            return Encoding.UTF8.GetBytes(str);
        }

        public static long ToTimestamp(this DateTime value)
        {
            return (long)(value - new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)).TotalSeconds;
        }
    }
}
