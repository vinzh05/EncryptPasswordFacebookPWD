using Sodium;
using System;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
        private static Random random = new Random();
        public static string GenerateEncPassword(string password, string publicKey, string keyId)
        {
            var time = DateTime.UtcNow.ToTimestamp(); // Unix timestamp
            var keyBytes = HexTobytes(publicKey); // Convert a hex string to a byte array
            var key = new byte[32];
            random.NextBytes(key);
            var iv = new byte[16]; // Use 16 bytes for IV (initialization vector) for AesCryptoServiceProvider
            //var tag = new byte[16];
            var plainText = Encoding.UTF8.GetBytes(password);
            var cipherText = new byte[plainText.Length];

            using (var aes = new AesCryptoServiceProvider())
            {
                aes.Key = key;
                aes.IV = iv;
                aes.Mode = CipherMode.CBC;
                aes.Padding = PaddingMode.PKCS7;

                using (var encryptor = aes.CreateEncryptor())
                {
                    cipherText = encryptor.TransformFinalBlock(plainText, 0, plainText.Length);
                }
            }
            var encryptedKey = SealedPublicKeyBox.Create(key, keyBytes);
            var bytesOfLen = BitConverter.GetBytes((short)encryptedKey.Length);
            if (BitConverter.IsLittleEndian)
                Array.Reverse(bytesOfLen); // Ensure big-endian byte order for length
            var info = new byte[] { 1, byte.Parse(keyId) };
            var bytes = info.Concat(bytesOfLen).Concat(encryptedKey).Concat(cipherText).ToArray(); // Convert to byte array

            // expected: #PWD_BROWSER:10:1595671654:ARBQAFWLYGkTT9UU0dyUCkaGTRFu0PH5Ph5s86DUAbZ+B9xon8cKmnqQGaUo7bB4NHCMKQRY69b9LwaJZ1rDw1OFM0LEGtI+KbDuDC0QnfJM6o1no0XPOl73RJoUZ/OfN5nE2q/IdqX0NFinS0faRf8=
            var str = $"#PWD_BROWSER:{5}:{time}:{ToBase64(bytes)}";
            return str;
        }

        public static byte[] HexTobytes(string hex)
        {
            return Enumerable.Range(0, hex.Length / 2)
                .Select(x => Convert.ToByte(hex.Substring(x * 2, 2), 16))
                .ToArray();
        }

        public static long ToTimestamp(this DateTime dateTime)
        {
            return (long)(dateTime - new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)).TotalSeconds;
        }

        public static string ToBase64(this byte[] bytes)
        {
            return Convert.ToBase64String(bytes);
        }
